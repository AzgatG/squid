import {Chain} from "../chain"
import {Range} from "../util/range"
import {Store} from "./handlerContext"
import {SubstrateBlock, SubstrateEvent, SubstrateExtrinsic} from "./substrate"


export type EvmContractAddress = string
export type EvmTopic = string


/**
 * Encapsulates a Substrate Event generated by an EVM log.
 * 
 * This is a specific subtype of {@link SubstrateEvent}, where the name is always `evm.Log`
 * and it also contains additional EVM-specific information, such as 
 * {@link EvmContractAddress}, {@link EvmTopic}s, data and hash
 */
export interface EvmLogEvent extends SubstrateEvent {
    name: 'evm.Log'
    evmLogAddress: EvmContractAddress
    evmLogTopics: EvmTopic[]
    evmLogData: string
    evmHash: string
}

/**
 * Defines the context for the execution of an {@link EvmLogHandler} function.
 * 
 * Contains EVM-specific information, as well as generic Substrate data (block, event, extrinsics), common to all 
 * other types of contexts.
 * 
 * @property topic: list of {@link EvmTopic}
 * @property data: `string` representing the EvmLog data
 * @property txHash: `string` representing the hash value of the EvmLog
 * @property contractAddress: {@link EvmContractAddress} object
 * @property substrate: object containing {@link SubstrateEvent}, {@link SubstrateBlock} and optionally {@link SubstrateExtrinsic}
 * @property store: {@link Store}
 * 
 * @see EventHandlerContext
 */
export interface EvmLogHandlerContext {
    topics: EvmTopic[]
    data: string
    txHash: string
    contractAddress: EvmContractAddress
    substrate: {
        _chain: Chain,
        event: SubstrateEvent,
        block: SubstrateBlock,
        extrinsic?: SubstrateExtrinsic
    }
    store: Store
}

/**
 * Functions used to process Substrate EvmLogs should adhere to this interface.
 */
export interface EvmLogHandler {
    (ctx: EvmLogHandlerContext): Promise<void>
}


export type EvmTopicSet = EvmTopic | null | undefined | EvmTopic[]

/**
 * Specifies a range of blocks to be processed by {@link EvmLogHandler} functions
 *
 * @property range: (optional) A {@link Range}, specifying a starting and (optionally) end block for processing. Optional.
 * @property filter: (optional) An {@link EvmTopicSet} to filter handler execution based on evm topics
 */
export interface EvmLogHandlerOptions {
    range?: Range
    /**
     * EVM topic filter as defined by https://docs.ethers.io/v5/concepts/events/#events--filters
     */
    filter?: EvmTopicSet[]
}
